@# Included from rosidl_typesupport_fastrtps_c/resource/idl__type_support_c.cpp.em
@{
TEMPLATE(
    'msg__type_support_c.cpp.em',
    package_name=package_name, interface_path=interface_path, message=service.request_message,
    include_directives=include_directives)
}@

@{
TEMPLATE(
    'msg__type_support_c.cpp.em',
    package_name=package_name, interface_path=interface_path, message=service.response_message,
    include_directives=include_directives)
}@

@{
TEMPLATE(
    'msg__type_support_c.cpp.em',
    package_name=package_name, interface_path=interface_path, message=service.event_message,
    include_directives=include_directives)
}@

@{
from rosidl_pycommon import convert_camel_case_to_lower_case_underscore
from rosidl_parser.definition import SERVICE_REQUEST_MESSAGE_SUFFIX
from rosidl_parser.definition import SERVICE_RESPONSE_MESSAGE_SUFFIX
from rosidl_parser.definition import SERVICE_EVENT_MESSAGE_SUFFIX

include_parts = [package_name] + list(interface_path.parents[0].parts) + \
    [convert_camel_case_to_lower_case_underscore(interface_path.stem)]
include_base = '/'.join(include_parts)

header_files = [
    # Provides the definition of the service_type_support_callbacks_t struct.
    'rosidl_typesupport_fastrtps_cpp/service_type_support.h',
    'rosidl_typesupport_cpp/service_type_support.hpp',
    'rosidl_typesupport_fastrtps_c/identifier.h',
    package_name + '/msg/rosidl_typesupport_fastrtps_c__visibility_control.h',
    include_base + '.h',
]
}@
@[for header_file in header_files]@
@[    if header_file in include_directives]@
// already included above
// @
@[    else]@
@{include_directives.add(header_file)}@
@[    end if]@
#include "@(header_file)"
@[end for]@

#if defined(__cplusplus)
extern "C"
{
#endif

@#TODO(ihasdapie): Import Postfixes
@{event_type = '__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]) + SERVICE_EVENT_MESSAGE_SUFFIX}@ 
@{request_type = '__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]) + SERVICE_REQUEST_MESSAGE_SUFFIX}@
@{response_type = '__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]) + SERVICE_RESPONSE_MESSAGE_SUFFIX}@

// This is generated by a macro in other cases in this file
void * rosidl_typesupport_fastrtps_c_@('__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]))__service_introspection_message__create (
    const rosidl_service_introspection_info_t * info,
    rcutils_allocator_t * allocator,
    void * request_message,
    void * response_message,
    bool enable_message_payload)
{
  auto * event_msg = static_cast<@event_type *>(allocator->zero_allocate(1, sizeof(@event_type), allocator->state));
  if (!@(event_type)__init(event_msg)) {
    allocator->deallocate(event_msg, allocator->state);
    return NULL;
  }

  event_msg->info.event_type = info->event_type;
  event_msg->info.sequence_number = info->sequence_number;
  event_msg->info.stamp.sec = info->stamp_sec;
  event_msg->info.stamp.nanosec = info->stamp_nanosec;
  for (size_t i = 0; i < 16; ++i) {
    event_msg->info.client_id.uuid[i] = info->client_id[i];
  }

  if (enable_message_payload) {
    if (NULL == request_message) {
      event_msg->response.capacity = 1;
      event_msg->response.size = 1;
      event_msg->response.data = static_cast<@response_type *>(allocator->zero_allocate(1, sizeof(@response_type), allocator->state));
      if (! @(response_type)__copy((@response_type *) response_message, &event_msg->response.data[0])) {
        return NULL;
      }
    }
    else if (NULL == response_message) {
      event_msg->request.capacity = 1;
      event_msg->request.size = 1;
      event_msg->request.data = static_cast<@request_type *>(allocator->zero_allocate(1, sizeof(@request_type), allocator->state));
      if (! @(request_type)__copy((@request_type *) request_message, &event_msg->request.data[0])){
        return NULL;
      }
    } else {
      // set error?
      return NULL;
    }
  }
  return event_msg;
}

bool rosidl_typesupport_c_@('__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]))__service_introspection_message__destroy (
  void * event_msg,
  rcutils_allocator_t * allocator
)
{ 
  if (NULL == event_msg) {
    return false;
  }
  
  // check null
  @(event_type)__fini((@event_type *) event_msg);
  allocator->deallocate(event_msg, allocator->state);
  return true;
}

bool rosidl_typesupport_fastrtps_c_@('__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]))__service_introspection_message__destroy (
  void * event_msg,
  rcutils_allocator_t * allocator
)
{ 
  if (NULL == event_msg) {
    return false;
  }
  
  // check null
  @(event_type)__fini((@event_type *) event_msg);
  allocator->deallocate(event_msg, allocator->state);
  return true;
}





static service_type_support_callbacks_t @(service.namespaced_type.name)__callbacks = {
  "@('::'.join([package_name] + list(interface_path.parents[0].parts)))",
  "@(service.namespaced_type.name)",
  ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_fastrtps_c, @(', '.join([package_name] + list(interface_path.parents[0].parts) + [service.namespaced_type.name]))_Request)(),
  ROSIDL_TYPESUPPORT_INTERFACE__MESSAGE_SYMBOL_NAME(rosidl_typesupport_fastrtps_c, @(', '.join([package_name] + list(interface_path.parents[0].parts) + [service.namespaced_type.name]))_Response)(),
};

static rosidl_service_type_support_t @(service.namespaced_type.name)__handle = {
  rosidl_typesupport_fastrtps_c__identifier,
  &@(service.namespaced_type.name)__callbacks,
  get_service_typesupport_handle_function,
  rosidl_typesupport_fastrtps_c_@('__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]))__service_introspection_message__create,
  rosidl_typesupport_fastrtps_c_@('__'.join([package_name, *interface_path.parents[0].parts, service.namespaced_type.name]))__service_introspection_message__destroy,
  &_@(service.namespaced_type.name)_Event__type_support
};












const rosidl_service_type_support_t *
ROSIDL_TYPESUPPORT_INTERFACE__SERVICE_SYMBOL_NAME(rosidl_typesupport_fastrtps_c, @(', '.join([package_name] + list(interface_path.parents[0].parts) + [service.namespaced_type.name])))() {
  return &@(service.namespaced_type.name)__handle;
}

#if defined(__cplusplus)
}
#endif
